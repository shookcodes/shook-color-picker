---
const { className } = Astro.props
---

<color-slider class={className}>
	<input
		type="range"
		class="color-slider"
		min="0"
		max="360"
		aria-label="hue"
		aria-label="update the hue value by sliding the range"
	/>
</color-slider>
<script>
	import { setCanvas } from '@utils/colorPicker'
	import { updateColorValues } from '@utils/convertColor'
	import { setCurrentColor } from '@store/colors'

	class ShookColorSlider extends HTMLElement {
		constructor() {
			super()

			const wrapper = document.querySelector('.canvas-wrapper')!
			// Update the canvas gradients and set current color in store when the color slider  is updated
			const handleSliderUpdate = (e: MouseEvent) => {
				const hue = e.target.value
				setCanvas({ wrapper, hue })
				const color = updateColorValues({ hue })
				setCurrentColor(color)
			}

			const slider = this.querySelector('.color-slider')
			slider.addEventListener('input', handleSliderUpdate)
		}
	}
	customElements.define('color-slider', ShookColorSlider)
</script>

<style lang="scss">
	.color-slider {
		width: 100%;
		-webkit-appearance: none;
		appearance: none;
		width: 100%;
		height: 0.5rem;
		border-radius: 2rem;
		margin: 0.5rem 0;
		// Rainbow colors for slider
		background: linear-gradient(
			90deg,
			#ff0000,
			#ff4000,
			#ff8000,
			#ffbf00,
			#ffff00,
			#bfff00,
			#80ff00,
			#40ff00,
			#00ff00,
			#00ff40,
			#00ff80,
			#00ffbf,
			#00ffff,
			#00bfff,
			#0080ff,
			#0040ff,
			#0000ff,
			#4000ff,
			#8000ff,
			#bf00ff,
			#ff00ff,
			#ff00bf,
			#ff0080,
			#ff0040,
			#ff0000
		);
		outline: none;
		-webkit-transition: 0.2s;
		transition: opacity 0.2s;

		&::-webkit-slider-thumb,
		&::-moz-range-thumb {
			appearance: none;
			-webkit-appearance: none;
			-moz-appearance: none;

			border: 1px solid #000;
			width: 0.8rem;
			height: 0.8rem;
			border-radius: 100%;
			background: transparent;
		}
	}
</style>
