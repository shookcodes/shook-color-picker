---
import SettingsDropdown from './SettingsDropdown.astro'
import { Icon } from 'astro-icon/components'
---

<color-picker id="shook-color-picker" class="shook-color-picker opacity-0">
	<SettingsDropdown />
	<div class="canvas-wrapper">
		<div class="color-marker" aria-label="selected color marker"></div>

		<div class="tooltip-color">
			<span class="tooltip-color-preview"></span><span class="tooltip-color-text"></span>
		</div>

		<canvas id="color-picker-canvas "></canvas>
	</div>
	<input type="range" class="color-range" min="0" max="360" aria-label="hue" />
	<div class="color-inputs">
		<div class="color-label-wrapper">
			<label class="color-label">
				<span>Hex</span>
				<input
					type="text"
					aria-label="selected hex code"
					id="input-hex"
					class="color-input"
				/></label
			><button class="button-icon button-input-copy"><Icon name="copy" /></button>
		</div>
		<div class="color-label-wrapper">
			<label class="color-label">
				<span>RGB</span>
				<input
					type="text"
					aria-label="selected RGB code"
					id="input-rgb"
					class="color-input"
				/></label
			><button class="button-icon button-input-copy"><Icon name="copy" /></button>
		</div>
		<div class="color-label-wrapper">
			<label class="color-label">
				<span>HSL</span>
				<input
					type="text"
					aria-label="selected HSL code"
					id="input-hsl"
					class="color-input"
				/></label
			><button class="button-icon button-input-copy"><Icon name="copy" /></button>
		</div>
		<div class="color-label-wrapper">
			<label class="color-label">
				<span>CMYK</span>
				<input type="text" aria-label="selected CMYK code" id="input-cmyk" class="color-input" />
			</label><button class="button-icon button-input-copy"><Icon name="copy" /></button>
		</div>
	</div>
</color-picker>

<script>
	import { updateColorValues } from '../utils/convertColor'
	import { setCanvas, getColorAtPosition, updateInputValues } from '../utils/colorPicker'
	import { copyContent } from '../utils/clipboard'

	class ShookColorPicker extends HTMLElement {
		constructor() {
			super()

			const wrapper: HTMLCanvasElement = this.querySelector('.canvas-wrapper')!

			const range: HTMLInputElement = this.querySelector('.color-range')!
			const tooltip: HTMLDivElement = this.querySelector('.tooltip-color')!
			const tooltipText: HTMLSpanElement = tooltip.querySelector('.tooltip-color-text')!
			const tooltipColor: HTMLSpanElement = tooltip.querySelector('.tooltip-color-preview')!

			const colorInputs = this.querySelectorAll('.color-input')

			const copyButtons = this.querySelectorAll('.button-input-copy')

			const { canvas, ctx, marker } = setCanvas({ wrapper, hue: range.value })

			canvas.addEventListener('load', this.classList.remove('opacity-0'))

			const handleCopyButtonClick = (e: MouseEvent) => {
				const label = e.currentTarget.previousElementSibling

				const text = label.querySelector('input').value

				copyContent(text)
			}

			copyButtons.forEach((button) => {
				button.addEventListener('click', (e) => handleCopyButtonClick(e))
			})

			// Update the canvas gradients when the color slider range is updated
			const handleRangeUpdate = (e: MouseEvent) => {
				const hue = e.target.value
				setCanvas({ wrapper, hue })
			}

			const getCursorPoint = (x, y) => {
				if (!x || !y) return
				const bounds = wrapper.getBoundingClientRect()

				const left = bounds.left >= 0 ? x - bounds.left : x + bounds.left * -1

				const top = bounds.top >= 0 ? y - bounds.top : bounds.bottom + y

				return { left, top }
			}

			const updateTooltipPosition = (e: MouseEvent, tooltip: HTMLDivElement) => {
				if (!e || !tooltip) return
				const x = e.clientX
				const y = e.clientY

				const { top, left } = getCursorPoint(x, y)

				if (!top || !left) {
					return (tooltip.style.opacity = '0')
				}
				const { hex } = getColorAtPosition(ctx, left, top)

				tooltip.style.opacity = '1'
				tooltip.style.left = `${left + 10}px`
				tooltip.style.top = `${top}px`

				tooltipText.innerText = hex

				tooltipColor.style.background = hex
			}

			const handleTooltipVisibility = (e: MouseEvent, tooltip: HTMLDivElement) => {
				if (e.type === 'mouseenter') {
					tooltip.style.opacity = '1'
				} else if (e.type === 'mouseleave') {
					tooltip.style.opacity = '0'
				}
			}

			const handleCanvasClick = (e: MouseEvent) => {
				const hex = tooltipText.innerText

				const x = e.clientX
				const y = e.clientY

				const { left, top } = getCursorPoint(x, y)

				if (!top || !left) return

				marker.style.display = 'block'

				marker.style.left = `${left - 4}px`
				marker.style.top = `${top - 4}px`

				updateInputValues(colorInputs, { hex })
			}

			range.addEventListener('input', handleRangeUpdate)

			canvas.addEventListener('mouseenter', (e) => handleTooltipVisibility(e, tooltip))

			canvas.addEventListener('mousemove', (e) => updateTooltipPosition(e, tooltip))

			canvas.addEventListener('mouseleave', (e) => handleTooltipVisibility(e, tooltip))

			canvas.addEventListener('click', (e) => {
				handleCanvasClick(e)
			})
		}
	}

	customElements.define('color-picker', ShookColorPicker)
</script>

<style lang="scss">
	.shook-color-picker {
		display: flex;
		flex-direction: column;
		gap: 0.5rem;
		padding: 0.5rem 1rem 1.5rem 1rem;
		border-radius: 0.75rem;
		box-shadow: 2px 2px 8px rgba(106, 106, 106, 0.3);
		max-width: 280px;
		background: #f9f9f9;
		width: max-content;
		transition: all 0.2s ease-in;
	}

	.canvas-wrapper {
		position: relative;
		width: 100%;
		height: 100%;
		max-height: 200px;

		outline: 1px solid #e6e6e6;
		border-radius: 0.25rem;
	}

	.color-range {
		width: 100%;
		-webkit-appearance: none;
		appearance: none;
		width: 100%;
		height: 0.5rem;
		border-radius: 2rem;
		margin: 0.5rem 0;
		// Rainbow colors for slider
		background: linear-gradient(
			90deg,
			#ff0000,
			#ff4000,
			#ff8000,
			#ffbf00,
			#ffff00,
			#bfff00,
			#80ff00,
			#40ff00,
			#00ff00,
			#00ff40,
			#00ff80,
			#00ffbf,
			#00ffff,
			#00bfff,
			#0080ff,
			#0040ff,
			#0000ff,
			#4000ff,
			#8000ff,
			#bf00ff,
			#ff00ff,
			#ff00bf,
			#ff0080,
			#ff0040,
			#ff0000
		);
		outline: none;
		-webkit-transition: 0.2s;
		transition: opacity 0.2s;

		&::-webkit-slider-thumb,
		&::-moz-range-thumb {
			appearance: none;
			-webkit-appearance: none;
			-moz-appearance: none;

			border: 1px solid #000;
			width: 0.8rem;
			height: 0.8rem;
			border-radius: 100%;
			background: transparent;
		}
	}

	.selected-color {
		margin-top: 20px;
		font-size: 18px;
	}

	.tooltip-color {
		position: absolute;
		display: flex;
		top: 0;
		left: 0;
		opacity: 0;
		margin: 0;
		background-color: #333;
		padding: 0.25rem 0.5rem;
		border-radius: 5px;
		width: max-content;
		align-items: center;
		gap: 0.5rem;
		transition: opacity 0.2s ease-in-out;
		z-index: 3;
		user-select: none;

		& .tooltip-color-text {
			user-select: none;
			@apply text-neutral-100;
		}
	}

	.color-marker {
		position: absolute;
		z-index: 2;
		display: none;
		width: 8px;
		height: 8px;
		top: 0;
		left: 0;
		caret-color: transparent;
		border-radius: 100%;
		background: #000000;
	}

	.tooltip-color-preview {
		width: 1rem;
		height: 1rem;
		border-radius: 4px;
		border: 1px solid #c7c7c7;
	}

	.button-icon {
		@apply h-5 w-5 text-neutral-600 transition-all duration-300;

		&:hover {
			@apply text-neutral-400;
		}

		&.button-input-copy {
			@apply absolute right-2 top-7 z-10;
		}
	}

	.color-label-wrapper {
		@apply relative;
	}

	.color-label {
		@apply flex flex-col gap-1;

		& span {
			caret-color: transparent;
			@apply text-xs;
		}
	}

	.color-input {
		border: 1px solid #ccc;
		z-index: 1;
		height: 35px;
		padding: 0 0.5rem;
		border-radius: 6px;
	}

	.color-inputs {
		gap: 1.75rem;
		@apply flex flex-col gap-4 border-t border-neutral-200 pt-6;
	}

	span {
		@apply text-neutral-700;
	}
</style>
