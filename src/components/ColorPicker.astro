---
import MenuBar from './menu/MenuBar.astro'
import ColorSlider from './ColorSlider.astro'
import ActiveColor from './ActiveColor.vue'
import Tooltip from '@global/Tooltip.astro'
import ColorInputGroup from './ColorInputGroup.vue'
import ColorPalette from '@palette/ColorPalette.vue'
---

<color-picker id="shook-color-picker" class="shook-color-picker opacity-0 background">
	<MenuBar />
	<div class="color-picker-content">
		<div class="canvas-with-slider">
			<div class="canvas-wrapper">
				<div class="color-marker" aria-label="selected color marker"></div>

				<Tooltip />

				<canvas id="shook-color-picker-canvas"></canvas>
			</div>
			<ColorSlider />
		</div>

		<div class="selected-colors-group">
			<ActiveColor client:only="vue" />
			<ColorInputGroup client:only="vue" />
		</div>
	</div>
	<ColorPalette client:only="vue" />
</color-picker>

<script>
	import { setCanvas, getCursorPoint } from '@utils/colorPicker'
	import { updateColorValues } from '@utils/convertColor'
	import { setCurrentColor } from '@store/colors'
	import { $theme } from '@/store/settings'

	import type { ColorObject, CursorCoordinates } from '../types'

	class ShookColorPicker extends HTMLElement {
		constructor() {
			super()

			const wrapper: HTMLDivElement = this.querySelector('.canvas-wrapper')!

			const slider: HTMLInputElement = this.querySelector('.color-slider')!
			const tooltip: HTMLDivElement = this.querySelector('.tooltip-color')!
			const tooltipText: HTMLSpanElement = tooltip.querySelector('.tooltip-color-text')!

			const theme = `theme-${$theme.get()}`

			this.classList.add(theme)

			const { canvas, marker } = setCanvas({ wrapper, hue: slider.value })

			const initialize = (): void => {
				this.classList.remove('opacity-0')

				const initialColor = updateColorValues({ hue: slider.value }) as ColorObject
				// Set the current color in the store based on the slider position.
				setCurrentColor(initialColor)
			}

			window.addEventListener('load', initialize)

			const handleCanvasClick = (e: MouseEvent) => {
				const hex = tooltipText.innerText

				const x = e.clientX
				const y = e.clientY

				const { left, top }: CursorCoordinates = getCursorPoint(wrapper, x, y) as {
					left: number
					top: number
				}

				if (!top || !left) return

				marker.style.display = 'block'

				marker.style.left = (left - 4 + 'px').toString()
				marker.style.top = (top - 4 + 'px').toString()

				// Get color object based on hex value and set the new object to the store.
				const color = updateColorValues({ hex })
				setCurrentColor(color)
				return color
			}

			canvas.addEventListener('click', (e) => {
				handleCanvasClick(e)
			})
		}
	}

	customElements.define('color-picker', ShookColorPicker)
</script>

<style lang="scss">
	@import '../styles/index.scss';
	@import '../styles/variables.scss';
	.shook-color-picker {
		display: flex;
		flex-direction: column;
		max-width: 220px;
		width: max-content;
		transition: all 0.2s ease-in;
		z-index: 1;
		@apply relative mx-auto rounded-md;

		.color-picker-content {
			z-index: 1;
		}

		.canvas-with-slider {
			@apply flex flex-col gap-3;
		}

		.canvas-wrapper {
			position: relative;
			width: 100%;
			height: 100%;
			height: 160px;
		}

		canvas {
			height: 160px;
			@apply rounded-md border border-neutral-100;
		}

		.color-marker {
			position: absolute;
			display: none;
			width: 8px;
			height: 8px;
			top: 0;
			right: 0;
			caret-color: transparent;
			border-radius: 100%;
			background: #000000;
		}

		.selected-colors-group {
			@apply flex flex-col gap-2;
		}

		span {
			@apply text-neutral-700;
		}

		&.theme-dark {
			canvas {
				@apply border-neutral-700;
			}
		}
	}
</style>
