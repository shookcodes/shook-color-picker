---
import { Icon } from 'astro-icon/components'
---

<color-picker id="shook-color-picker">
	<div id="settings-dropdown-wrapper" class="relative">
		<button class="button-icon place-self-end" id="settings-button"><Icon name="settings" /></button
		>
		<ol id="settings-dropdown" class="pointer-events-none transition-all opacity-0 duration-300">
			<li class="settings-dropdown-li">Display hex</li>
			<li class="settings-dropdown-li">Display RGB</li>
			<li class="settings-dropdown-li">Display HSL</li>
			<li class="settings-dropdown-li">Display CMYK</li>
		</ol>
	</div>
	<div id="canvas-wrapper w-full h-full" class="relative">
		<div id="color-marker"></div>

		<div id="tooltip-color">
			<span id="tooltip-color-preview"></span><span id="tooltip-color-text"></span>
		</div>

		<canvas id="color-picker-canvas" width="200" height="200"></canvas>
	</div>
	<input type="range" id="color-range" min="0" max="360" aria-label="hue" />
	<div class="color-inputs w-full max-w-[180px]">
		<div class="flex flex-wrap gap-4">
			<div class="color-label-wrapper">
				<label class="color-label">
					<span>Hex</span>
					<input
						type="text"
						aria-label="selected hex code"
						id="input-hex"
						class="color-input"
					/></label
				><button class="button-icon button-input-copy"><Icon name="copy" /></button>
			</div>
			<div class="color-label-wrapper">
				<label class="color-label">
					<span>RGB</span>
					<input
						type="text"
						aria-label="selected RGB code"
						id="input-rgb"
						class="color-input"
					/></label
				><button class="button-icon button-input-copy"><Icon name="copy" /></button>
			</div>
			<div class="color-label-wrapper">
				<label class="color-label">
					<span>HSL</span>
					<input
						type="text"
						aria-label="selected HSL code"
						id="input-hsl"
						class="color-input"
					/></label
				><button class="button-icon button-input-copy"><Icon name="copy" /></button>
			</div>
			<div class="color-label-wrapper">
				<label class="color-label">
					<span>CMYK</span>
					<input type="text" aria-label="selected CMYK code" id="input-cmyk" class="color-input" />
				</label><button class="button-icon button-input-copy"><Icon name="copy" /></button>
			</div>
		</div>
	</div>
</color-picker>

<script>
	import { hslToHex, hexToRgb, hexToHsl, hexToCmyk } from '../utils/convertColor'
	import {
		updateColorValues,
		setCanvasGradient,
		getColorAtPosition,
		updateInputValues
	} from '../utils/colorPicker'
	import { copyContent } from '../utils/clipboard'

	class ShookColorPicker extends HTMLElement {
		constructor() {
			super()

			const canvas: HTMLCanvasElement = this.querySelector('#color-picker-canvas')!
			const wrapper: HTMLCanvasElement = this.querySelector('#canvas-wrapper')!
			const ctx: CanvasRenderingContext2D = canvas.getContext('2d')!
			const range: HTMLInputElement = this.querySelector('#color-range')!
			const tooltip: HTMLDivElement = this.querySelector('#tooltip-color')!
			const tooltipText: HTMLSpanElement = tooltip.querySelector('#tooltip-color-text')!
			const tooltipColor: HTMLSpanElement = tooltip.querySelector('#tooltip-color-preview')!

			const settingsButton: HTMLButtonElement = this.querySelector('#settings-button')
			const settingsDropdown: HTMLOListElement = this.querySelector('#settings-dropdown')

			const marker: HTMLDivElement = this.querySelector('#color-marker')!

			const colorInputs = this.querySelectorAll('.color-input')

			const copyButtons = this.querySelectorAll('.button-input-copy')

			const handleCopyButtonClick = (e: MouseEvent) => {
				const label = e.currentTarget.previousElementSibling

				const text = label.querySelector('input').value

				copyContent(text)
			}
			copyButtons.forEach((button) => {
				button.addEventListener('click', (e) => handleCopyButtonClick(e))
			})

			const handleRangeUpdate = () => {
				const { hex } = updateColorValues({ hue: range.value })
				setCanvasGradient(canvas, hex)
			}

			const getCursorPoint = (x, y) => {
				if (!x || !y) return
				const bounds = canvas.getBoundingClientRect()

				const left = bounds.left >= 0 ? x - bounds.left - 4 : x + bounds.left * -1 - 4

				const top = bounds.top >= 0 ? y - bounds.top - 4 : bounds.bottom + y - 4

				return { left, top }
			}

			const updateTooltipPosition = (e: MouseEvent, tooltip: HTMLDivElement) => {
				if (!e || !tooltip) return
				const x = e.clientX
				const y = e.clientY

				const { top, left } = getCursorPoint(x, y)

				if (!top || !left) return
				const { hex } = getColorAtPosition(ctx, top, left)

				// Set the tooltip position
				tooltip.style.left = `${left + 10}px`
				tooltip.style.top = `${top}px`

				tooltipText.innerText = hex

				tooltip.style.display = 'flex'
				tooltipColor.style.background = hex

				// marker.style.opacity = '1'
				// marker.style.display = 'block'
				// marker.style.left = left + 'px'
				// marker.style.top = top + 'px'
			}

			const handleTooltipVisibility = (e: MouseEvent, tooltip: HTMLDivElement) => {
				if (e.type === 'mouseenter') {
					tooltip.style.opacity = '1'
				} else if (e.type === 'mouseleave') {
					tooltip.style.opacity = '0'
				}
			}

			const handleCanvasClick = (e: MouseEvent) => {
				const hex = tooltipText.innerText

				const x = e.clientX
				const y = e.clientY

				const { left, top } = getCursorPoint(x, y)

				if (!top || !left) return

				marker.style.display = 'block'

				marker.style.left = left + 'px'
				marker.style.top = top + 'px'

				updateInputValues(colorInputs, hex)
			}

			range.addEventListener('input', handleRangeUpdate)

			canvas.addEventListener('mouseenter', (e) => handleTooltipVisibility(e, tooltip))

			canvas.addEventListener('mousemove', (e) => updateTooltipPosition(e, tooltip))

			canvas.addEventListener('mouseleave', (e) => handleTooltipVisibility(e, tooltip))

			canvas.addEventListener('click', (e) => {
				handleCanvasClick(e)
			})

			const toggleSettingsDropdown = () => {
				if (settingsDropdown.classList.contains('opacity-0')) {
					settingsDropdown.style.zIndex = '5'

					return setTimeout(() => {
						settingsDropdown.classList.remove('opacity-0', 'pointer-events-none')
					}, 200)
				} else {
					settingsDropdown.classList.add('opacity-0', 'pointer-events-none')

					setTimeout(() => {
						settingsDropdown.style.zIndex = '-1'
					}, 400)
				}
			}

			settingsButton.addEventListener('click', toggleSettingsDropdown)

			// Set initial gradient for color picker canvas
			document.addEventListener('DOMContentLoaded', () => {
				const { hex } = updateColorValues({ hue: range.value })
				setCanvasGradient(canvas, hex)
			})
		}
	}

	customElements.define('color-picker', ShookColorPicker)
</script>

<style lang="scss">
	#shook-color-picker {
		display: flex;
		flex-direction: column;
		gap: 0.5rem;
		padding: 1rem 1rem 1.5rem 1rem;
		border-radius: 0.75rem;
		box-shadow: 2px 2px 8px rgba(106, 106, 106, 0.3);
		background: #f9f9f9;
		width: max-content;
	}

	#color-picker-canvas {
		border: 1px solid #ccc;
		border-radius: 0.5rem;
		// width: 200px;
		// height: 200px;
	}

	#color-range {
		width: 100%;
		-webkit-appearance: none; /* Override default CSS styles */
		appearance: none;
		width: 100%; /* Full-width */
		height: 0.5rem; /* Specified height */
		border-radius: 2rem;
		margin: 0.5rem 0;
		background: linear-gradient(
			90deg,
			#ff0000,
			#ff4000,
			#ff8000,
			#ffbf00,
			#ffff00,
			#bfff00,
			#80ff00,
			#40ff00,
			#00ff00,
			#00ff40,
			#00ff80,
			#00ffbf,
			#00ffff,
			#00bfff,
			#0080ff,
			#0040ff,
			#0000ff,
			#4000ff,
			#8000ff,
			#bf00ff,
			#ff00ff,
			#ff00bf,
			#ff0080,
			#ff0040,
			#ff0000
		);
		outline: none; /* Remove outline */
		-webkit-transition: 0.2s; /* 0.2 seconds transition on hover */
		transition: opacity 0.2s;
	}

	#settings-dropdown-wrapper {
		@apply flex items-center justify-end;
	}

	#settings-dropdown {
		z-index: -1;
		@apply absolute top-0 mt-5 flex flex-col gap-2 rounded-md border border-neutral-200 bg-neutral-100 py-2 shadow-md transition-all;
	}

	.settings-dropdown-li {
		@apply relative px-3 transition-colors;
		&::after {
			content: '';
			@apply absolute inset-0 mx-auto h-full w-[94%] rounded-md opacity-10 transition-colors;
		}
		&:hover {
			cursor: pointer;
			&::after {
				@apply bg-teal-700;
			}
		}
	}

	#selected-color {
		margin-top: 20px;
		font-size: 18px;
	}

	#tooltip-color {
		position: absolute;
		// top: 0;
		// left: 0;
		opacity: 0;
		margin: 0;
		background-color: #333;
		padding: 0.25rem 0.5rem;
		border-radius: 5px;
		width: max-content;
		align-items: center;
		gap: 0.5rem;
		transition: opacity 0.2s ease-in-out;
		z-index: 3;
		user-select: none;

		& #tooltip-color-text {
			user-select: none;
			@apply text-neutral-100;
		}
	}

	#color-marker {
		position: absolute;
		z-index: 2;
		display: none;
		width: 8px;
		height: 8px;
		top: 0;
		left: 0;
		border-radius: 100%;
		background: #000000;
	}

	#tooltip-color-preview {
		width: 1rem;
		height: 1rem;
		border-radius: 4px;
		border: 1px solid #c7c7c7;
	}

	.button-icon {
		@apply h-5 w-5 text-neutral-600 transition-all duration-300;

		&:hover {
			@apply text-neutral-400;
		}

		&.button-input-copy {
			@apply absolute right-2 top-7 z-10;
		}
	}

	.color-label-wrapper {
		@apply relative;
	}

	.color-label {
		@apply flex flex-col gap-1;

		& span {
			@apply text-xs;
		}
	}

	.color-input {
		border: 1px solid #ccc;
		z-index: 1;
		height: 35px;
		padding: 0 0.5rem;
		border-radius: 6px;
	}

	.color-inputs {
		gap: 1.75rem;
		@apply flex flex-col border-t border-neutral-200 pt-6;
	}

	span {
		@apply text-neutral-700;
	}
</style>
