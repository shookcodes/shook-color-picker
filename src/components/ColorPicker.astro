---
import SettingsDropdown from './SettingsDropdown.astro'
import Button from './global/Button.astro'
import Tooltip from './global/Tooltip.astro'
import Input from './global/Input.astro'

import { Icon } from 'astro-icon/components'
---

<color-picker id="shook-color-picker" class="shook-color-picker opacity-0">
	<SettingsDropdown />
	<div class="canvas-wrapper">
		<div class="color-marker" aria-label="selected color marker"></div>

		<Tooltip />

		<canvas id="shook-color-picker-canvas"></canvas>
	</div>
	<input
		type="range"
		class="color-range"
		min="1"
		max="360"
		aria-label="hue"
		aria-label="update the hue value by sliding the range"
	/>
	<div class="selected-color-display border-2 border-black"></div>
	<div class="color-inputs">
		<Input type="color" ariaLabel="selected hex code value" title="Hex" id="input-hex"
			><Button
				slot="inner-button"
				ariaLabel="copy the selected hex value"
				classList="button-icon button-input-copy"><Icon name="copy" /></Button
			></Input
		>
		<Input type="color" ariaLabel="selected RGB code value" title="RGB" id="input-rgb"
			><Button
				slot="inner-button"
				ariaLabel="copy the selected RGB value"
				classList="button-icon button-input-copy"><Icon name="copy" /></Button
			></Input
		>
		<Input type="color" ariaLabel="selected HSL code value" title="HSL" id="input-hsl"
			><Button
				slot="inner-button"
				ariaLabel="copy the selected HSL value"
				classList="button-icon button-input-copy"><Icon name="copy" /></Button
			></Input
		>
		<Input type="color" ariaLabel="selected CMYK code value" title="CMYK" id="input-cmyk"
			><Button
				slot="inner-button"
				ariaLabel="copy the selected CMYK value"
				classList="button-icon button-input-copy"><Icon name="copy" /></Button
			></Input
		>
	</div>
</color-picker>

<script>
	import {
		setCanvas,
		getColorAtPosition,
		getCursorPoint,
		updateInputValues
	} from '../utils/colorPicker'

	class ShookColorPicker extends HTMLElement {
		constructor() {
			super()

			const wrapper: HTMLDivElement = this.querySelector('.canvas-wrapper')!

			const range: HTMLInputElement = this.querySelector('.color-range')!
			const tooltip: HTMLDivElement = this.querySelector('.tooltip-color')!
			const tooltipText: HTMLSpanElement = tooltip.querySelector('.tooltip-color-text')!

			const colorInputs = this.querySelectorAll('.color-input')

			const { canvas, ctx, marker } = setCanvas({ wrapper, hue: range.value })

			canvas.addEventListener('load', this.classList.remove('opacity-0'))

			// Update the canvas gradients when the color slider range is updated
			const handleRangeUpdate = (e: MouseEvent) => {
				const hue = e.target.value
				setCanvas({ wrapper, hue })
			}

			const handleCanvasClick = (e: MouseEvent) => {
				const hex = tooltipText.innerText

				const x = e.clientX
				const y = e.clientY

				const { left, top } = getCursorPoint(wrapper, x, y)

				if (!top || !left) return

				marker.style.display = 'block'

				marker.style.left = `${left - 4}px`
				marker.style.top = `${top - 4}px`

				updateInputValues(colorInputs, { hex })
			}

			canvas.addEventListener('click', (e) => {
				handleCanvasClick(e)
			})
			range.addEventListener('input', handleRangeUpdate)
		}
	}

	customElements.define('color-picker', ShookColorPicker)
</script>

<style lang="scss">
	.shook-color-picker {
		display: flex;
		flex-direction: column;
		gap: 0.5rem;
		padding: 0.5rem 1rem 1.5rem 1rem;
		border-radius: 0.75rem;
		box-shadow: 2px 2px 8px rgba(106, 106, 106, 0.3);
		max-width: 280px;
		background: #f9f9f9;
		width: max-content;
		transition: all 0.2s ease-in;
	}

	.canvas-wrapper {
		position: relative;
		width: 100%;
		height: 100%;
		max-height: 200px;

		outline: 1px solid #e6e6e6;
		border-radius: 0.25rem;
	}

	.color-range {
		width: 100%;
		-webkit-appearance: none;
		appearance: none;
		width: 100%;
		height: 0.5rem;
		border-radius: 2rem;
		margin: 0.5rem 0;
		// Rainbow colors for slider
		background: linear-gradient(
			90deg,
			#ff0000,
			#ff4000,
			#ff8000,
			#ffbf00,
			#ffff00,
			#bfff00,
			#80ff00,
			#40ff00,
			#00ff00,
			#00ff40,
			#00ff80,
			#00ffbf,
			#00ffff,
			#00bfff,
			#0080ff,
			#0040ff,
			#0000ff,
			#4000ff,
			#8000ff,
			#bf00ff,
			#ff00ff,
			#ff00bf,
			#ff0080,
			#ff0040,
			#ff0000
		);
		outline: none;
		-webkit-transition: 0.2s;
		transition: opacity 0.2s;

		&::-webkit-slider-thumb,
		&::-moz-range-thumb {
			appearance: none;
			-webkit-appearance: none;
			-moz-appearance: none;

			border: 1px solid #000;
			width: 0.8rem;
			height: 0.8rem;
			border-radius: 100%;
			background: transparent;
		}
	}

	.color-marker {
		position: absolute;
		z-index: 2;
		display: none;
		width: 8px;
		height: 8px;
		top: 0;
		left: 0;
		caret-color: transparent;
		border-radius: 100%;
		background: #000000;
	}

	.selected-color-display {
		@apply h-14 w-full rounded-md border-t border-neutral-200 pt-6 shadow-sm;
	}

	.color-inputs {
		gap: 1.75rem;
		@apply flex flex-col gap-4;
	}

	span {
		@apply text-neutral-700;
	}
</style>
