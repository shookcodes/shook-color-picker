---

---

<color-picker id="shook-color-picker" class="w-max">
	<div id="tooltip-color">
		<span id="tooltip-color-preview"></span><span id="tooltip-color-text"></span>
	</div>
	<canvas id="color-picker-canvas"></canvas>
	<input type="range" id="color-range" min="0" max="360" />
</color-picker>

<script>
	import { hslToHex } from '../utils/convertColor'
	import { setCanvasGradient, getColorAtPosition } from '../utils/color-picker'

	class ShookColorPicker extends HTMLElement {
		constructor() {
			super()

			const canvas: HTMLCanvasElement = this.querySelector('#color-picker-canvas')!

			const ctx: CanvasRenderingContext2D = canvas.getContext('2d')!
			const range: HTMLInputElement = this.querySelector('#color-range')!
			const tooltip: HTMLDivElement = this.querySelector('#tooltip-color')!
			const tooltipText: HTMLSpanElement = tooltip.querySelector('#tooltip-color-text')!
			const tooltipColor: HTMLSpanElement = tooltip.querySelector('#tooltip-color-preview')!

			const updateRangeHex = (value: string) => hslToHex(parseInt(value), 100, 50)

			const handleRangeUpdate = () => {
				const hex = updateRangeHex(range.value)
				setCanvasGradient(canvas, hex)
			}

			const updateTooltipPosition = (e: MouseEvent, tooltip: HTMLDivElement) => {
				const rect = canvas.getBoundingClientRect()
				const x = e.clientX
				const y = e.clientY
				const canvasX = x - rect.left
				const canvasY = y - rect.top

				const hoverColor = getColorAtPosition(ctx, canvasX, canvasY)

				// Set the tooltip position
				tooltip.style.left = `${x + 10}px`
				tooltip.style.top = `${y}px`

				console.log('TT Color', hoverColor)
				tooltipText.innerText = hoverColor
				// Show the tooltip
				tooltip.style.display = 'flex'
				tooltipColor.style.background = hoverColor
			}

			const handleTooltipVisibility = (e: MouseEvent, tooltip: HTMLDivElement) => {
				if (e.type === 'mouseenter') {
					tooltip.style.opacity = '1'
				} else if (e.type === 'mouseleave') {
					tooltip.style.opacity = '0'
				}
			}

			range.addEventListener('input', handleRangeUpdate)

			canvas.addEventListener('mouseenter', (e) => handleTooltipVisibility(e, tooltip))

			canvas.addEventListener('mousemove', (e) => updateTooltipPosition(e, tooltip))

			canvas.addEventListener('mouseleave', (e) => handleTooltipVisibility(e, tooltip))

			// Set initial gradient for color picker canvas
			document.addEventListener('DOMContentLoaded', () => {
				const initialHexHue: string = updateRangeHex(range.value)
				setCanvasGradient(canvas, initialHexHue)
			})
		}
	}

	customElements.define('color-picker', ShookColorPicker)
</script>
<style lang="scss">
	#shook-color-picker {
		display: flex;
		flex-direction: column;
		gap: 1.75rem;
		padding: 1rem 1rem 1.5rem 1rem;
		// border: 1px solid #eeeeee;
		border-radius: 0.75rem;
		box-shadow: 2px 2px 8px rgba(106, 106, 106, 0.3);
	}

	#color-picker-canvas {
		border: 1px solid #ccc;
		border-radius: 0.5rem;
		width: 200px;
		height: 200px;
	}

	#color-range {
		width: 100%;

		-webkit-appearance: none; /* Override default CSS styles */
		appearance: none;
		width: 100%; /* Full-width */
		height: 0.5rem; /* Specified height */
		border-radius: 2rem;
		background: linear-gradient(
			90deg,
			#ff0000,
			#ff4000,
			#ff8000,
			#ffbf00,
			#ffff00,
			#bfff00,
			#80ff00,
			#40ff00,
			#00ff00,
			#00ff40,
			#00ff80,
			#00ffbf,
			#00ffff,
			#00bfff,
			#0080ff,
			#0040ff,
			#0000ff,
			#4000ff,
			#8000ff,
			#bf00ff,
			#ff00ff,
			#ff00bf,
			#ff0080,
			#ff0040,
			#ff0000
		);
		outline: none; /* Remove outline */
		-webkit-transition: 0.2s; /* 0.2 seconds transition on hover */
		transition: opacity 0.2s;
	}

	#selected-color {
		margin-top: 20px;
		font-size: 18px;
	}

	#tooltip-color {
		position: absolute;
		display: none;
		background-color: #333;
		color: #fff;
		padding: 0.25rem 0.5rem;
		border-radius: 5px;
		width: max-content;
		align-items: center;
		gap: 0.5rem;
		transition: opacity 0.2s ease-in-out;
	}

	#tooltip-color-preview {
		width: 1rem;
		height: 1rem;
		border-radius: 4px;
		// aspect-ratio: square;
		border: 1px solid #c7c7c7;
	}
</style>
